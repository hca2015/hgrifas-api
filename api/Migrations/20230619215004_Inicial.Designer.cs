// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api_lrpd.Models;

#nullable disable

namespace api_lrpd.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230619215004_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api_lrpd.Models.Cidade", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("atualizado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("atualizadoPor")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("criado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("criadoPor")
                        .HasColumnType("longtext");

                    b.Property<long>("estadoId")
                        .HasColumnType("bigint");

                    b.Property<string>("nome")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("estadoId");

                    b.ToTable("Cidade");
                });

            modelBuilder.Entity("api_lrpd.Models.Endereco", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("atualizado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("atualizadoPor")
                        .HasColumnType("longtext");

                    b.Property<string>("complemento")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("criado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("criadoPor")
                        .HasColumnType("longtext");

                    b.Property<long>("logradouroId")
                        .HasColumnType("bigint");

                    b.Property<string>("numero")
                        .HasColumnType("longtext");

                    b.Property<Guid>("usuarioId")
                        .HasColumnType("char(36)");

                    b.HasKey("id");

                    b.HasIndex("logradouroId");

                    b.HasIndex("usuarioId")
                        .IsUnique();

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("api_lrpd.Models.Entity.Token2FA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Expiracao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("atualizado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("atualizadoPor")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("criado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("criadoPor")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Token2FA");
                });

            modelBuilder.Entity("api_lrpd.Models.Estado", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("atualizado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("atualizadoPor")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("criado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("criadoPor")
                        .HasColumnType("longtext");

                    b.Property<string>("nome")
                        .HasColumnType("longtext");

                    b.Property<string>("sigla")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Estado");
                });

            modelBuilder.Entity("api_lrpd.Models.Logradouro", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("atualizado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("atualizadoPor")
                        .HasColumnType("longtext");

                    b.Property<string>("bairro")
                        .HasColumnType("longtext");

                    b.Property<string>("cep")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("cidadeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("criado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("criadoPor")
                        .HasColumnType("longtext");

                    b.Property<string>("rua")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("cep")
                        .IsUnique();

                    b.HasIndex("cidadeId");

                    b.ToTable("Logradouro");
                });

            modelBuilder.Entity("api_lrpd.Models.Menu", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("atualizado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("atualizadoPor")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("criado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("criadoPor")
                        .HasColumnType("longtext");

                    b.Property<string>("icon")
                        .HasColumnType("longtext");

                    b.Property<string>("link")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("menuId")
                        .HasColumnType("char(36)");

                    b.Property<string>("title")
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .HasColumnType("longtext");

                    b.Property<bool>("visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.HasKey("id");

                    b.HasIndex("menuId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("api_lrpd.Models.MenuIdentityRole", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("menuId")
                        .HasColumnType("char(36)");

                    b.Property<string>("roleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("id");

                    b.HasIndex("menuId");

                    b.HasIndex("roleId");

                    b.ToTable("MenuIdentityRole");
                });

            modelBuilder.Entity("api_lrpd.Models.Usuario", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("IdentityUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("aceiteTermos")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("aceitoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("atualizado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("atualizadoPor")
                        .HasColumnType("longtext");

                    b.Property<string>("avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("celular")
                        .HasColumnType("longtext");

                    b.Property<string>("cpf")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("criado")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("criadoPor")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("dataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("nome")
                        .HasColumnType("longtext");

                    b.Property<string>("sobrenome")
                        .HasColumnType("longtext");

                    b.Property<string>("status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("online");

                    b.HasKey("id");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("cpf")
                        .IsUnique();

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api_lrpd.Models.Cidade", b =>
                {
                    b.HasOne("api_lrpd.Models.Estado", "estado")
                        .WithMany()
                        .HasForeignKey("estadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("estado");
                });

            modelBuilder.Entity("api_lrpd.Models.Endereco", b =>
                {
                    b.HasOne("api_lrpd.Models.Logradouro", "logradouro")
                        .WithMany()
                        .HasForeignKey("logradouroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_lrpd.Models.Usuario", "usuario")
                        .WithOne("endereco")
                        .HasForeignKey("api_lrpd.Models.Endereco", "usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("logradouro");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("api_lrpd.Models.Entity.Token2FA", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("api_lrpd.Models.Logradouro", b =>
                {
                    b.HasOne("api_lrpd.Models.Cidade", "cidade")
                        .WithMany()
                        .HasForeignKey("cidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cidade");
                });

            modelBuilder.Entity("api_lrpd.Models.Menu", b =>
                {
                    b.HasOne("api_lrpd.Models.Menu", null)
                        .WithMany("children")
                        .HasForeignKey("menuId");
                });

            modelBuilder.Entity("api_lrpd.Models.MenuIdentityRole", b =>
                {
                    b.HasOne("api_lrpd.Models.Menu", "menu")
                        .WithMany("roles")
                        .HasForeignKey("menuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "role")
                        .WithMany()
                        .HasForeignKey("roleId");

                    b.Navigation("menu");

                    b.Navigation("role");
                });

            modelBuilder.Entity("api_lrpd.Models.Usuario", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId");

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("api_lrpd.Models.Menu", b =>
                {
                    b.Navigation("children");

                    b.Navigation("roles");
                });

            modelBuilder.Entity("api_lrpd.Models.Usuario", b =>
                {
                    b.Navigation("endereco");
                });
#pragma warning restore 612, 618
        }
    }
}
